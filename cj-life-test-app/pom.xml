<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>cj.life</groupId>
        <artifactId>cj-life-gateway</artifactId>
        <version>1.0.0</version>
    </parent>
    <groupId>cj.life</groupId>
    <artifactId>cj-life-test-app</artifactId>
    <name>cj-life-test-app</name>
    <description>cj-life-test-app</description>
    <properties>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>cj.life</groupId>
            <artifactId>cj-life-ability-banner</artifactId>
            <version>0.0.1</version>
        </dependency>
        <dependency>
            <groupId>cj.life</groupId>
            <artifactId>cj-life-ability-eureka</artifactId>
            <version>0.0.1</version>
        </dependency>
        <dependency>
            <groupId>cj.life</groupId>
            <artifactId>cj-life-ability-oauth2-app</artifactId>
            <version>0.0.1</version>
        </dependency>
        <dependency>
            <groupId>cj.life</groupId>
            <artifactId>cj-life-ability-swagger</artifactId>
            <version>0.0.1</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.2</version>
                <!--将插件绑定在某个phase执行-->
                <executions>
                    <execution>
                        <id>build-image</id>
                        <!--用户只需执行mvn package ，就会自动执行mvn docker:build-->
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--指定生成的镜像名,这里是我们的作者名+项目名-->
                    <imageName>life/app-test</imageName>
                    <!--指定标签 这里指定的是镜像的版本，我们默认版本是latest-->
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <!--指定基础镜像jdk1.8-->
                    <baseImage>java:8</baseImage>
                    <!--
                    镜像制作人本人信息-->
                    <maintainer>carocean.jofers@outlook.com</maintainer>
                    <!--切换到ROOT目录-->
                    <workdir>/app</workdir>
                    <!--查看我们的java版本-->
                    <cmd>["java", "-version"]</cmd>
                    <!--${project.build.finalName}.jar是打包后生成的jar包的名字-->
                    <entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>
                    <exposes>
                        <!--（！！！）这个暴露接口也要变化 -->
                        <expose>8082</expose>
                    </exposes>
                    <!--docker的环境变量模拟在docker run 命令于中输入 -e 变量名-->
                    <!--此处定义的值是dockerfile运行时的默认值，在用docker-compose或run启动时可通过-e参数覆盖掉-->
                    <env>
                        <life.spring.profiles.active>prod</life.spring.profiles.active>
                        <!--                        <life.register-with-eureka>false</life.register-with-eureka>-->
                        <!--                        <life.fetch-registry>false</life.fetch-registry>-->
                        <life.EUREKA_SERVER_URL>http://localhost:8761/eureka/</life.EUREKA_SERVER_URL>
                        <life.hostname>localhost</life.hostname>
                    </env>
                    <!--指定远程 docker api地址 远程仓库-->
                    <!--                    <dockerHost>http://localhost:2375</dockerHost>-->
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/app</targetPath>
                            <!--jar 包所在的路径  此处配置的 即对应 target 目录-->
                            <directory>${project.build.directory}</directory>
                            <!--用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
